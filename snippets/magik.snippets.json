#% text_encoding = iso8859_1
_package sw
$
_pragma(classify_level=basic, topic={testing})
def_slotted_exemplar(:vscode_test_exemplar
    {
        {:var1, _unset}
    })
$
_pragma(classify_level=restricted, topic={vscode_test_exemplar}, usage={internal})
vscode_test_exemplar.define_slot_access(:var1, :read, :public)
$
_pragma(classify_level=basic, topic={testing}, usage={external})
_method vscode_test_exemplar.new()
    ## Function: 
    ## Arguments: 
    ## Returns: 
     >> _clone.init()
_endmethod
$
_pragma(classify_level=restricted, topic={testing}, usage={internal}
_private _method vscode_test_exemplar.init()
    ## Function: 
    ## Arguments: 
    ## Returns: 
     >> _self
_endmethod
$
_pragma(classify_level=advanced, topic={vscode_test_exemplar}, usage={redefinable})
_method vscode_test_exemplar.my_complex_method()
    ## Function: 
    ## Arguments: 
    ## Returns: 
    _protect
        _for i _over 1.upto(10)
        _loop
            _lock i
                            
            _endlock
            
            
        _endloop
    _protection
        
    _endprotect
_endmethod
$
_pragma(classify_level=basic,topic={testing}, usage={external})
_iter _method vscode_test_exemplar.my_iter_method()
    ## Function: my_iter_method
    ## Arguments: 
    ## Returns
	_catch @my-cond
		_handling _default _with _proc _endproc
        write(1)  
    _endcatch
    _loopbody(10)
_endmethod
$


private__pragma(classify_level=basic, topic={class_name}, usage={external})
_method class_name.method_name()
    ## Function: 
    ## Arguments: 
    ## Returns: 
    
_endmethod
$
_pragma(classify_level=restricted, topic={vscode_test_exemplar}, usage={external})
_method vscode_test_exemplar.doit()
    ## Function: 
    ## Arguments: 
    ## Returns: 

_endmeth od
$


_pragma(classify_level=restricted, topic={class_name}, usage={internal})
_private _method class_name.method_name()
    ## Function: 
    ## Arguments: 
    ## Returns: 
    
_endmethod
$

_pragma(classify_level=advanced, topic={vscode_test_exemplar}, usage={internal})
_method vscode_test_exemplar.do_nothing()
    ## Function: 
    ## Arguments: 
    ## Returns: 
    
_endmethod
$

_pragma(classify_level=basic, topic={class_name}, usage={external})
_method class_name.method_name()
    ## Function: 
    ## Arguments: 
    ## Returns: 
    
_endmethod
$
_pragma(classify_level=restricted, topic={vscode_test_exemplar}, usage={internal})
_private _method vscode_test_exemplar.m1()
    ## Function: 
    ## Arguments: 
    ## Returns: 

_endmethod
$


_pragma(classify_level=basic, topic={va})
def_slotted_exemplar(:va,
    {
        {:s1, _unset}
    })
$

_pragma(classify_level=restricted, topic={vscode_test_exemplar}, usage={internal})
vscode_test_exemplar.define_slot_access(:name, :read, :public)
$

