{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Magik",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#exemplar"
		},
		{
			"include": "#console"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#methods"
		},
		{
			"include": "#definitions"
		},
		{
			"include": "#debug"
		},
		{
			"include": "#proc"
		},
		{
			"include": "#slot"
		},
		{
			"include": "#symbol"
		},
		{
			"include": "#method_call"
		},
		{
			"include": "#object"
		},
		{
			"include": "#operators"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "variable.language.this.magik",
					"match": "\\b(_self)\\b"
				},
				{
					"name": "constant.language.undefined.magik",
					"match": "\\b(_unset)\\b"
				},
				{
					"name": "constant.language.boolean.magik",
					"match": "\\b(_true|_false|_maybe)\\b"
				},
				{
					"name": "keyword.control.conditional.magik",
					"match": "\\b(_if|_then|_else|_elif|_endif)\\b"
				},
				{
					"name": "keyword.operator.logical.magik",
					"match": "\\b(_is|_isnt|_not|_and|_andif|_or|_orif|_xor|_cf)\\b"
				},
				{
					"name": "keyword.control.loop.magik",
					"match": "\\b(_for|_over|_loop|_finally|_endloop|_while)\\b"
				},
				{
					"name": "keyword.control.flow.magik",
					"match": "\\b(_return|_loopbody|_leave|_continue)\\b"
				},
				{
					"name": "variable.language.magik",
					"match": "\\b(_super|_clone|_thisthread)\\b"
				},
				{
					"name": "keyword.control.trycatch.magik",
					"match": "\\b(_try|_with|_when|_endtry|_throw|_catch|_handling|_endcatch|_default|_protect|_protection|_endprotect)\\b"
				},
				{
					"name": "storage.type.magik",
					"match": "\\b(_local|_global|_dynamic|_constant|_import)\\b"
				},
				{
					"name": "storage.type.class.magik",
					"match": "\\b(_package)\\b"
				},
				{
					"name": "storage.type.function.magik",
					"match": "\\b(_proc|_endproc|_block|_endblock|_lock|_endlock|_locking)\\b"
				},
				{
					"name": "storage.modifier.magik",
					"match": "\\b(_optional|_scatter|_gather|_allresults)\\b"
				},
				{
					"name": "storage.modifier.function.magik",
					"match": "\\b(_private|_iter|_abstract)\\b"
				},
				{
					"name": "keyword.operator.arithmetic.magik",
					"match": "\\b(_div|_mod|_divmod)\\b"
				},
				{
					"name": "invalid.illegal.warning.magik",
					"match": "\\b(remex)\\b"
				}
			]
		},
		"exemplar": {
			"patterns": [
				{
					"begin": "(def_slotted_exemplar|def_mixin)\\s*\\(",
					"beginCaptures": {
						"1": {"name": "storage.type.class.magik"}
					},
					"end": "(:[\\w!?]+)\\s*(,|\\))",
					"endCaptures": {
						"1": {"name": "entity.name.class.magik"}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "##?\\s*(fixme|FIXME|debug|DEBUG|todo|TODO|ToDo)",
					"beginCaptures": {
						"0": {"name": "comment.line.magik"},
						"1": {"name": "invalid.illegal.magik"}
					},
					"end": "\\n",
					"name": "comment.line.magik"
				},
				{
					"begin": "##",
					"beginCaptures": {
						"0": {"name": "comment.block.documentation.magik"}
					},
					"end": "\\n",
					"name": "comment.block.documentation.magik"
				},
				{
					"begin": "(?:^|[^%])(#)",
					"beginCaptures": {
						"1": {"name": "comment.line.magik"}
					},
					"end": "\\n",
					"name": "comment.line.magik"
				},
				{
					"begin": "_pragma",
					"beginCaptures": {
						"0": {"name": "comment.block.documentation.pragma.magik"}
					},
					"end": "\\n",
					"name": "comment.block.documentation.pragma.magik"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "(?:^|[^%])(\")",
					"beginCaptures": {
						"1": {"name": "string.quoted.double.magik"}
					},
					"end": "((^# Magik>)|^\\$\\s*$|(^|[^%]?)(\"))",
					"endCaptures": {
						"2": {"name": "storage.type.function.magik"},
						"3": {"name": "string.quoted.double.magik"},
						"4": {"name": "string.quoted.double.magik"}
					},
					"contentName": "string.quoted.double.magik"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.magik",
					"match": "\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b"
				}
			]
		},
		"methods": {
			"patterns": [
				{
					"match": "(_method)\\s+([\\w!?]+)\\s*(?:\\.)\\s*([\\w!?]+)",
					"captures": {
						"1": {"name": "storage.type.function.magik"},
						"2": {"name": "entity.name.class.magik"},
						"3": {"name": "entity.name.function.definition.magik"}
					}
				},
				{
					"match": "(_method)\\s+([\\w!?]+)\\s*(?:[\\.\\[])",
					"captures": {
						"1": {"name": "storage.type.function.magik"},
						"2": {"name": "entity.name.class.magik"}
					}
				},
				{
					"name": "storage.type.function.magik",
					"match": "\\b(_endmethod)\\b"
				}
			]
		},
		"definitions": {
			"patterns": [
				{
					"match": "\\b([\\w!?]+)\\s*(?:\\.)\\s*(define_slot_access|define_shared_constant|def_property|define_property|define_shared_variable|define_slot_externally_readable|define_slot_externally_writable)",
					"captures": {
						"1": {"name": "entity.name.class.magik"},
						"2": {"name": "storage.type.property.magik"}
					}
				}
			]
		},
		"debug": {
			"patterns": [
				{
					"match": "(?:\\s+)(show|write|debug_print|print|!traceback!)\\s*(?=\\()",
					"captures": {
						"1": {"name": "invalid.illegal.magik"}
					}
				},
				{
					"match": "^(\\*\\*\\*\\* Error:?)\\s+",
					"captures": {
						"1": {"name": "invalid.illegal.magik"}
					}
				},
				{
					"match": "^(\\*\\*\\*\\* Warning:?)\\s+",
					"captures": {
						"1": {"name": "invalid.illegal.warning.magik"}
					}
				},
				{
					"match": "^(---- (?:traceback|debug):)\\s+\\.*?\\s+(----)$",
					"captures": {
						"1": {"name": "invalid.illegal.magik"},
						"2": {"name": "invalid.illegal.magik"}
					}
				},
				{
					"match": "^[\\+\\-#\\*]{2,}\\s+.*?\\s+[\\+\\-#\\*]{2,}$",
					"name": "comment.block.documentation.title.magik"
				}
			]
		},
		"proc": {
			"patterns": [
				{
					"match": "(?:\\s*[^#\"\\w!?])([A-Za-z0-9!?]+[\\w!?]*)\\s*(?=\\()",
					"captures": {
						"1": {"name": "entity.name.function.magik"}
					}
				}
			]
		},
		"slot": {
			"patterns": [
				{
					"match": "(?:\\s*[^#\"\\w!?)\\]])(\\.[\\w!?]+)(?=\\s*[^\\w!?])",
					"captures": {
						"1": {"name": "variable.other.property.magik"}
					}
				}
			]
		},
		"symbol": {
			"patterns": [
				{
					"match": "(?:\\s*[^#\"\\w!?])((?:\\:[\\w!?]*\\|.+\\|)|(?:\\:[\\w!?]+))(?=\\s*[^\\w!?])",
					"captures": {
						"1": {"name": "string.quoted.other.magik"}
					}
				}
			]
		},
		"method_call": {
			"patterns": [
				{
					"match": "(?:[^\"]\\.)([\\w!?]+)\\s*(?=\\()",
					"captures": {
						"1": {"name": "entity.name.function.magik"}
					}
				}
			]
		},
		"object": {
			"patterns": [
				{
					"match": "\\b[\\w!?]+\\b",
					"name": "variable.other.object.magik"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.magik",
					"match": "(>>|<<|\\+<<|\\-<<|\\*<<|\\/<<)"
				},
				{
					"name": "keyword.operator.magik",
					"match": "(=|<>|<|>|<=|>=|<>)"
				},
				{
					"name": "keyword.operator.arithmetic.magik",
					"match": "(\\-|\\+|\\*|\\/)"
				}
			]
		},
		"console": {
			"patterns": [
				{
					"begin": "(# Magik>) ",
					"beginCaptures": {
						"1": {"name": "storage.type.function.magik"}
					},
					"end": "\\n"
				}
			]
		}
	},
	"scopeName": "source.magik"
}